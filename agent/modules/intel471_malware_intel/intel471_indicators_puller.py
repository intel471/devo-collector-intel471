import logging
import time
from datetime import datetime
from typing import Dict

# noinspection PyUnresolvedReferences
from agent.modules.intel471_malware_intel.intel471_indicators_puller_setup import Intel471IndicatorsPullerSetup
from agent.modules.intel471_malware_intel.exceptions.exceptions import *
from devocollectorsdk.inputs.collector_puller_abstract import CollectorPullerAbstract

log = logging.getLogger(__name__)

logging.getLogger('intel471_indicators_puller').setLevel(logging.WARNING)


class Intel471IndicatorsPuller(CollectorPullerAbstract):

    # def create_setup_instance(
    #         self,
    #         setup_class_name: str,
    #         autosetup_enabled: bool,
    #         collector_variables: dict) -> CollectorPullerSetupAbstract:
    #     """
    #
    #     :param setup_class_name:
    #     :param autosetup_enabled:
    #     :param collector_variables:
    #     :return:
    #     """
    #
    #     setup_class = globals()[setup_class_name]
    #     return setup_class(
    #         self,
    #         collector_variables,
    #         autosetup_enabled,
    #         self.input_id,
    #         self.input_name,
    #         self.input_config,
    #         self.input_definition,
    #         self.service_name,
    #         self.service_type,
    #         self.service_config,
    #         self.service_definition,
    #         self.module_name,
    #         self.module_config,
    #         self.module_definition,
    #         self.persistence_object,
    #         self.output_queue,
    #         self.submodule_name,
    #         self.submodule_config
    #     )

    def init_variables(
            self,
            input_config: dict,
            input_definition: dict,
            service_config: dict,
            service_definition: dict,
            module_config: dict,
            module_definition: dict,
            submodule_config: dict):
        """

        :param input_config:
        :param input_definition:
        :param service_config:
        :param service_definition:
        :param module_config:
        :param module_definition:
        :param submodule_config:
        :return:
        """

        self.log_debug(f'{self.name} Starting the execution of init_variables()')

        # Initialization of properties from credentials section from configuration
        credentials = input_config.get('credentials')
        if credentials is None:
            raise CredentialException(1, f'Missing required "credentials" section in the configuration')

        username = credentials.get('username')
        if username is None:
            raise CredentialException(2, f'Missing required "username" property from "credentials" section in configuration')
        self.collector_variables['username'] = username

        password = credentials.get('password')
        if password is None:
            raise CredentialException(3,'Missing required "password" property from "credentials" section in configuration')
        self.collector_variables['password'] = password

        parameters = input_config.get('parameters')
        duration = parameters.get('duration')
        indicator_type = parameters.get('type')

        self.log_debug(f'{self.name} Finalizing the execution of init_variables()')

    def pre_pull(self, retrieving_timestamp: datetime):
        """
        :param retrieving_timestamp:
        :return:
        """
        self.

        params: Dict = {
            'count': 100,
            '_from': '_from',
        }

    def pull(self, retrieving_timestamp: datetime):
        """

        :param retrieving_timestamp:
        :return:
        """

        self.log_debug(f'Starting {self.name} pull()')

        example_tag = 'my.app.if_framework.example_2'
        example_content = 'Example text from \"example_2\"'

        self.send_standard_message(datetime.utcnow(), example_tag, example_content)
        time.sleep(1)
        self.send_standard_message(datetime.utcnow(), example_tag, example_content)

        self.log_debug('Messages sent to output')

        self.log_debug('Finalizing pull()')

    def check_status_code(self, code: str):
        """ Check response status code """
        # Check is user's TITAN credentials are configured correctly
        if code == '401':
            raise UnauthorisedException(401, 'Unauthorised. Please check your TITAN credentials (email and API key) are configured correctly.')
        # Check if user's is authorised to retrieve data from queried API endpoint
        elif code == '404':
            raise NoAccessException(404, 'No access to this feed. Please contact your CSR to enquire about this feed.')
        # Check if user has reached maximum API request limit
        elif code == '429':
            raise MaxLimitException(429, 'Maximum API request limit hit. Please wait to try again or contact your CSR to increase limit if usage requires.')
